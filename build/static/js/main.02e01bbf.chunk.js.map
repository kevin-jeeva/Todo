{"version":3,"sources":["navigation/NavBar.js","form/TodoForm.js","components/TodoTable.js","components/Home.js","components/Messages.js","navigation/Routes.js","App.js","index.js"],"names":["NavBar","activeItem","handleItemClick","Menu","pointing","secondary","size","Item","link","name","active","onClick","position","TodoForm","onSubmit","validationSchema","yup","shape","todo","required","initialValues","values","resetForm","errors","touched","handleChange","handleSubmit","Form","Grid","Row","Column","width","Field","Input","fluid","value","onChange","placeholder","Label","basic","color","Button","type","TodoTable","todos","onComplete","onRemove","Table","celled","Header","HeaderCell","Body","map","index","positive","status","negative","Cell","task","Icon","inverted","no","displayTodos","Home","useState","setTodos","completedTodos","setCompletedTodos","useEffect","localStorage","getItem","JSON","parse","completes","Container","as","circular","Math","random","setItem","stringify","length","modifiedTodos","todoVal","filter","TodoCompletedTable","console","log","Message","floating","Routes","exact","path","component","App","history","useHistory","setActiveItem","location","pathname","props","clear","push","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.02e01bbf.chunk.js","sourcesContent":["import React from \"react\";\nimport { Menu } from \"semantic-ui-react\";\n\nconst NavBar = ({ activeItem, handleItemClick }) => {\n  return (\n    <Menu pointing secondary size=\"huge\">\n      <Menu.Item\n        link\n        name=\"home\"\n        active={activeItem === \"/\"}\n        onClick={() => handleItemClick(\"/\")}\n      />\n      <Menu.Item\n        name=\"completed todos\"\n        active={activeItem === \"/completed\"}\n        onClick={() => handleItemClick(\"/completed\")}\n      />\n      <Menu.Menu position=\"right\">\n        <Menu.Item\n          name=\"clear storage\"\n          active={activeItem === \"/clear\"}\n          onClick={() => handleItemClick(\"/clear\")}\n        />\n      </Menu.Menu>\n    </Menu>\n  );\n};\n\nexport default NavBar;\n","import React, { useState } from \"react\";\nimport { Formik } from \"formik\";\nimport { Grid, Input, Button, Form, Label } from \"semantic-ui-react\";\nimport * as yup from \"yup\";\n\nconst TodoForm = ({ onSubmit }) => {\n  const initialValues = { todo: \"\" };\n  const validationSchema = yup.object().shape({\n    todo: yup.string().required(\"Required\"),\n  });\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={(values, { resetForm }) => {\n        resetForm();\n        onSubmit(values);\n      }}\n    >\n      {({ values, errors, touched, handleChange, handleSubmit }) => (\n        <Form onSubmit={handleSubmit}>\n          <Grid>\n            <Grid.Row>\n              <Grid.Column width={10}>\n                <Form.Field>\n                  <Input\n                    fluid\n                    size=\"large\"\n                    name=\"todo\"\n                    value={values.todo || \"\"}\n                    onChange={handleChange}\n                    placeholder=\"Enter a task\"\n                  />\n                  {errors.todo && touched.todo ? (\n                    <Label basic color=\"red\" pointing>\n                      Enter a task\n                    </Label>\n                  ) : null}\n                </Form.Field>\n              </Grid.Column>\n              <Grid.Column width={6}>\n                <Button type=\"submit\">Add Task</Button>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default TodoForm;\n","import React from \"react\";\nimport { Table, Button, Icon } from \"semantic-ui-react\";\n\nconst TodoTable = ({ todos, onComplete, onRemove }) => {\n  const displayTodos = () => {\n    if (todos) {\n      return todos.map((todo, index) => {\n        const positive = todo.status ? true : false;\n        const negative = !todo.status ? true : false;\n        return (\n          <Table.Row key={todo.no} positive={positive} negative={negative}>\n            <Table.Cell>{index + 1}</Table.Cell>\n            <Table.Cell>{todo.task}</Table.Cell>\n            <Table.Cell>\n              {todo.status ? (\n                <Icon name=\"checkmark\">Completed</Icon>\n              ) : (\n                <Icon name=\"close\">Incomplete</Icon>\n              )}\n            </Table.Cell>\n            <Table.Cell>\n              {!todo.status && (\n                <Button inverted color=\"green\" onClick={() => onComplete(todo)}>\n                  Complete Task\n                </Button>\n              )}\n              <Button inverted color=\"red\" onClick={() => onRemove(todo)}>\n                Remove\n              </Button>\n            </Table.Cell>\n          </Table.Row>\n        );\n      });\n    }\n  };\n\n  return (\n    <Table celled>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell></Table.HeaderCell>\n          <Table.HeaderCell>Task</Table.HeaderCell>\n          <Table.HeaderCell>Status</Table.HeaderCell>\n          <Table.HeaderCell>Action</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>{todos && displayTodos()}</Table.Body>\n    </Table>\n  );\n};\n\nexport default TodoTable;\n","import React, { useEffect, useState } from \"react\";\nimport { Container, Grid, Header, Icon } from \"semantic-ui-react\";\nimport TodoForm from \"../form/TodoForm\";\nimport uniqueId from \"lodash/uniqueId\";\nimport TodoTable from \"./TodoTable\";\n\nconst Home = () => {\n  const [todos, setTodos] = useState([]);\n  const [completedTodos, setCompletedTodos] = useState([]);\n\n  useEffect(() => {\n    if (localStorage.getItem(\"todos\")) {\n      const todos = JSON.parse(localStorage.getItem(\"todos\"));\n      setTodos([...todos]);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (localStorage.getItem(\"completed\")) {\n      const completes = JSON.parse(localStorage.getItem(\"completed\"));\n      setCompletedTodos([...completes]);\n    }\n  }, []);\n\n  const handleSubmit = (values) => {\n    const todo = {\n      no: \"secert\" + Math.random() * 7,\n      task: values.todo,\n      status: false,\n    };\n    setTodos([...todos, todo]);\n    localStorage.setItem(\"todos\", JSON.stringify([...todos, todo]));\n  };\n\n  const handleComplete = (todo) => {\n    const modifiedTodos = todos.map((todoVal) => {\n      if (todoVal.no === todo.no) {\n        todoVal.status = true;\n      }\n      return todoVal;\n    });\n    setTodos([...modifiedTodos]);\n    localStorage.setItem(\"todos\", [...modifiedTodos]);\n  };\n\n  const hanldeRemove = (todo) => {\n    const modifiedTodos = todos.filter((todoVal) => todoVal !== todo);\n    setTodos([...modifiedTodos]);\n    localStorage.setItem(\"todos\", [...modifiedTodos]);\n    setCompletedTodos([...completedTodos, todo]);\n    localStorage.setItem(\n      \"completed\",\n      JSON.stringify([...completedTodos, todo])\n    );\n  };\n\n  return (\n    <Container>\n      <Grid>\n        <Grid.Row>\n          <Grid.Column width={10}>\n            <Header as=\"h3\">\n              <Icon circular inverted name=\"ordered list\" size=\"massive\" />\n              Enter the To Do List\n            </Header>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n      <TodoForm onSubmit={handleSubmit} />\n      {todos.length !== 0 && (\n        <TodoTable\n          todos={todos}\n          onComplete={handleComplete}\n          onRemove={hanldeRemove}\n        />\n      )}\n    </Container>\n  );\n  //   const inputValue = useRef(null);\n  //   const [value, setValue] = useState([]);\n\n  //   const hanldeSubmit = () => {\n  //     if (inputValue.current.value.trim() !== \"\") {\n  //       const currentValue = inputValue.current.value.trim();\n  //       setValue([...value, currentValue]);\n  //       inputValue.current.value = \"\";\n  //       inputValue.current.focus();\n  //     }\n  //     console.log(\"no empty strings allowed...\");\n  //   };\n\n  //   const hanldeDelete = (remove_value) => {\n  //     const filteredResult = value.filter((val) => val !== remove_value);\n  //     setValue([...filteredResult]);\n  //   };\n};\n\nexport default Home;\n\n{\n  /* <input ref={inputValue} type=\"text\" name=\"type-something\"></input>\n      <button onClick={hanldeSubmit} type=\"submit\">\n        Submit\n      </button>\n      {value.length !== 0 && (\n        <button\n          className=\"btn btn-sm btn-success ml-3\"\n          onClick={() => setValue([])}\n        >\n          Clear\n        </button>\n      )}\n      <ul>\n        {value &&\n          value.map((val) => (\n            <div key={val + 1} className=\"row p-10\">\n              <li>{val}</li>\n              <button\n                type=\"button\"\n                className=\"btn btn-sm btn-danger btn-outline mb-3 ml-2\"\n                onClick={() => hanldeDelete(val)}\n              >\n                remove\n              </button>\n            </div>\n          ))}\n      </ul> */\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Container, Table, Message } from \"semantic-ui-react\";\n\nconst TodoCompletedTable = () => {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    console.log(localStorage.getItem(\"completed\"));\n    if (localStorage.getItem(\"completed\")) {\n      const completes = JSON.parse(localStorage.getItem(\"completed\"));\n      setTodos([...completes]);\n    }\n  }, []);\n\n  const displayTodos = () => {\n    if (todos) {\n      console.log(todos);\n      return todos.map((todo, index) => {\n        return (\n          <Table.Row key={todo.no}>\n            <Table.Cell>{index + 1}</Table.Cell>\n            <Table.Cell>{todo.task}</Table.Cell>\n          </Table.Row>\n        );\n      });\n    }\n  };\n\n  if (todos.length !== 0) {\n    return (\n      <Container>\n        <Table celled>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell></Table.HeaderCell>\n              <Table.HeaderCell>Completed Task</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>{todos && displayTodos()}</Table.Body>\n        </Table>\n      </Container>\n    );\n  }\n\n  return (\n    <Container>\n      <Message floating>No Completed Task here :)</Message>\n    </Container>\n  );\n};\n\nexport default TodoCompletedTable;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Home from \"../components/Home\";\nimport TodoCompletedTable from \"../components/Messages\";\n\nconst Routes = () => {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={Home} />\n      <Route exact path=\"/completed\" component={TodoCompletedTable} />\n    </Switch>\n  );\n};\n\nexport default Routes;\n","import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport NavBar from \"./navigation/NavBar\";\nimport Routes from \"./navigation/Routes\";\n\nconst App = () => {\n  const history = useHistory();\n  const [activeItem, setActiveItem] = useState();\n\n  useEffect(() => {\n    setActiveItem(history.location.pathname);\n  }, []);\n\n  const handleItemClick = (props) => {\n    if (props === \"/clear\") {\n      localStorage.clear();\n    }\n\n    history.push(props);\n    setActiveItem(props);\n  };\n\n  return (\n    <>\n      <NavBar activeItem={activeItem} handleItemClick={handleItemClick} />\n      <Routes />\n    </>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}